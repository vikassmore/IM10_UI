{"version":3,"file":"src_app_admin_setting_setting_module_ts.js","mappings":"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","sources":["./src/app/admin/setting/passwordchange/passwordchange.component.ts","./src/app/admin/setting/passwordchange/passwordchange.component.html","./src/app/admin/setting/setting.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { FormControl, FormGroup, FormBuilder } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { AppService } from 'src/app/app.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { emailValidator, matchingPasswords } from 'src/app/theme/utils/app-validators';\nimport { MatTabChangeEvent, MatTabGroup } from '@angular/material/tabs';\nimport { changepassword } from './passwordchange.Model';\nimport { AuthenticationService } from 'src/app/shared/services/authentication.service';\n\n@Component({\n  selector: 'app-passwordchange',\n  templateUrl: './passwordchange.component.html',\n  styleUrls: ['./passwordchange.component.css']\n})\n\nexport class PasswordchangeComponent implements OnInit {\n  hide = true;\n  userId: string;\n  password: string;\n  confirmPassword: string;\n  submitted = false;\n  public formdata = {};\n  sessionuserId: any;\n\n  uploadForm = new FormGroup({\n\n    userId: new FormControl('', []),\n    password: new FormControl('', [Validators.required]),\n  });\n\n  constructor(public authservise: AuthenticationService, public sessionStorage: TokenStorageService, public appService: AppService,\n    public snackBar: MatSnackBar, private route: ActivatedRoute, private router: Router, public formBuilder: FormBuilder) {\n\n    this.uploadForm = this.formBuilder.group({\n      password: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(6),\n      ])),\n      confirmPassword: new FormControl('', Validators.compose([\n        Validators.required,\n      ])),\n    },\n      { validator: matchingPasswords('password', 'confirmPassword') });\n  }\n\n  public onSubmit(value) {\n    this.changepassword(value);\n  }\n  validatePassword() {\n  }\n\n  changepassword(formData) {\n    let SectorModel1: changepassword = {\n      \"userId\": this.sessionuserId,\n      \"password\": formData.password\n    }\n    this.appService.changepassword('api/user/ChangePassword', SectorModel1).subscribe((data) => {\n      this.snackBar.open('Password Changed Successfully!', '×', { panelClass: 'success', verticalPosition: 'top', duration: 3000 });\n      this.router.navigate(['../dashboard'], { relativeTo: this.route });\n    }, error => {\n      this.snackBar.open('Something went wrong!', '×', { panelClass: 'error', verticalPosition: 'top', duration: 3000 });\n    });\n  }\n  ngOnInit(): void {\n\n    this.sessionuserId = this.sessionStorage.getUser().userId;\n  }\n\n}\n","<div class=\"p-1\">\n    <mat-card class=\"p-0\">\n        <div fxLayout=\"row wrap \" fxLayoutAlign=\"space-between center\" class=\"w-100 p-2 crdhead\">\n            <h2><i class=\"fa fa-bars\" aria-hidden=\"true\"></i>&nbsp; Change Password</h2>\n        </div>\n        <form [formGroup]=\"uploadForm\" (ngSubmit)=\"onSubmit(uploadForm.value)\">\n            <mat-card-content>\n                <div fxLayout=\"column\" fxLayoutGap=\"10px\" class=\"container\">\n                    <div fxLayout.gt-sm=\"row\" fxLayout.lt-md=\"column\" fxLayoutGap=\"10px\" fxFlex=\"33%\" class=\"block-2\">\n                        <div fxFlex.gt-sm=\"50%\" fxFlex.lt-md=\"50%\" fxLayoutAlign=\"center center\" fxFlexFill\n                            class=\"grid-item\">\n                            <mat-form-field appearance=\"outline\" class=\"w-100 mt-1\">\n                                <mat-label>Enter New Password</mat-label>\n                                <input matInput placeholder=\"Password\" formControlName=\"password\" required\n                                    type=\"password\" minlength=\"6\" required [type]=\"hide ? 'password' : 'text'\">\n                                <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' :\n                                    'visibility'}}</mat-icon>\n                                <mat-error *ngIf=\"uploadForm.controls.password.errors?.required\">Password is\n                                    required</mat-error>\n                                <mat-error *ngIf=\"uploadForm.controls.password.hasError('minlength')\">Password isn't\n                                    long\n                                    enough, minimum of 6 characters</mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div fxFlex.gt-sm=\"50%\" fxFlex.lt-md=\"50%\" fxLayoutAlign=\"center center\" fxFlexFill\n                            class=\"grid-item\">\n                            <mat-form-field appearance=\"outline\" class=\"w-100 mt-1\">\n                                <mat-label>Confirm New Password</mat-label>\n                                <input matInput placeholder=\"Confirm Password\" formControlName=\"confirmPassword\"\n                                    required type=\"text\" required>\n                                <mat-error *ngIf=\"uploadForm.controls.confirmPassword.errors?.required\">Confirm\n                                    Password is\n                                    required</mat-error>\n                                <mat-error *ngIf=\"uploadForm.controls.confirmPassword.hasError('mismatchedPasswords')\">\n                                    Passwords do not match</mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </div>\n            </mat-card-content>\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" class=\" p-2 crdfooter\">\n                <div fxLayout=\"\" fxLayoutGap=\"10px\" class=\"container\">\n                    <div fxFlex=\"50%\" class=\"text-left\">\n                        <button [routerLink]=\"['../../dashboard']\" mat-raised-button color=\"accent\" type=\"button\"> <i\n                                class=\"fa fa-arrow-circle-left\" aria-hidden=\"true\"></i> BACK</button>\n                        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!uploadForm.valid\"><i\n                                class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i> SUBMIT</button>\n                    </div>\n                    <div fxFlex=\"50%\" class=\"text-right\">\n                        <h4 class=\"crdtip\">Tip : (*) fields are mandatory.</h4>\n                    </div>\n                </div>\n            </div>\n\n        </form>\n    </mat-card>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../../shared/shared.module';\nimport { PasswordchangeComponent } from './passwordchange/passwordchange.component';\nimport { DashboardComponent } from '../dashboard/dashboard/dashboard.component';\n\nexport const routes = [ \n  { path: '', redirectTo: 'setting', pathMatch: 'full'},\n  { path: 'passwordchange', component: PasswordchangeComponent},\n  {path:'dashboard', component:DashboardComponent}\n];\n\n@NgModule({\n  declarations: [\n    PasswordchangeComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    ReactiveFormsModule,\n    SharedModule,\n  ]\n})\nexport class SettingModule { }\n"],"names":[],"sourceRoot":"webpack:///"}